#!/usr/bin/perl

$in = 0;
$l = "";
$n=0;

print "<div class=\"row-fluid\">\n";
while(<>) {
    if(/  (product|lp64_product)\(/) { 
        chomp;
        $in = 1;
        $l = $_;
        if(/\" ?\)/) {
            $in = 0;
            p($_);
        }
    } elsif ($in == 1) { if(/\"\)/) { $in = 0;
            $_ = $l . $_;
            p($_);
        } else { chomp;
            $l = $l . $_;
        }
    }
}
print "</div>\n";


sub clean
{
    $_ = $_[0];
    s/"/ /g;
    s/\s+\\\s+/ /g;
    s/\)\s*\\?$/ /g;
    s/  ([a-zA-Z0-9_]*?)\((.*?), ?(.*?), ?(.*?),/$1|$3|$2|$4|/g;
    s/^ //g;
    s/\| +/|/g;
    s/\|\|/|--empty value--|/g;
    s/\|bool\|/|Boolean|/g;
    s/\|uintx\|/|Positive Integer|/g;
    s/\|intx\|/|Integer|/g;
    s/\|double\|/|Double|/g;
    s/\|ccstrlist\|/|String list (comma separated)|/g;
    s/\|ccstr\|/|String|/g;
    s/&/&amp;/g;
    s/</&lt;/g;
    s/>/&gt;/g;
    s/(\d+)\*([GMK])/$1$2/g;
    s/NULL/null/g;
    s/NOT_LP64\((.*?)\) LP64_ONLY\((.*?)\)/$1 for 32-bits arch, $2 for 64-bits arch/g;
    s/max_uintx/0xFFFFFFFF for 32-bits arch, 0xFFFFFFFFFFFFFFFF for 64-bits arch/g;
    s/ScaleForWordSize\((.*?)\)/$1/g;
    s# /\*ms\*/##g;

    return $_;
}


sub p
{
    $_ = clean($_[0]);

    if(/(.*)\|(.*)\|(.*)\|(.*)\|(.*)/){
        $op = $1;
        $na = $2;
        $ty = $3;
        $df = $4;
        $de = $5;

        if($op =~ /lp64/) {
            @arch = ("64-bits");
        } else {
            @arch = ("32-bits", "64-bits");
        }

        $op =~ s/product|lp64_product/Product/g;

        xhtml($op, $na, $ty, $df, $de, \@arch);
    }


    if($n++ == 2) {print "</div>\n<div class=\"row-fluid\">\n";
        $n=0;
    }
}

sub xhtml
{
    $arch = join("</span> <span class='label arch'>", @{$_[5]});
    print "<div class='span4 well'><h3>$_[1]</h3><p><strong>Type : </strong>$_[2]</p><p><strong>Default value : </strong>$_[3]</p><p>$_[4]</p><p><span class='label $_[0]'>$_[0]</span> <span class='label arch'>$arch</span></p></div>\n";

}

sub xml
{
    $_=$_[0];
    s#(.*)\|(.*)\|(.*)\|(.*)#<jvm:option><jvm:name>$1</jvm:name><jvm:type>$2</jvm:type><jvm:default>$3</jvm:default><jvm:description>$4</jvm:description><jvm:tags><jvm:tag>Unknown</jvm:tag></jvm:tags></jvm:option>#g;
    print "$_\n";

}

sub html
{
    $_=$_[0];
    s#(.*)\|(.*)\|(.*)\|(.*)#<h4>$1</h4><br/>Type : $2<br/>Default value : $3<br/>Description : $4<br/>#g;
    print "$_\n";

}

sub json
{
    $_=$_[0];
    s#(.*)\|(.*)\|(.*)\|(.*)#  { "name": "$1", "type": "$2", "default": "$3", "description": "$4", "tags": [ { "tag": "Unknown" } ] },#g;
    print "$_\n";

}


