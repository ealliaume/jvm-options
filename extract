#!/usr/bin/perl

$in = 0; $l = "";
$n=0;
print "<div class=\"row-fluid\">\n";
while(<>) {
    if(/  product\(/) { $in = 1; chomp; $l = $_; if(/\" ?\)/) { $in = 0; p($_); }
    } elsif ($in == 1) { if(/\"\)/) { $in = 0; $_ = $l . $_; p($_); } else { chomp; $l = $l . $_; }
    }
}
print "</div>\n";


sub p
{
    $_ = $_[0]; s/"/ /g; s/\s+\\\s+/ /g; s/\)\s*\\?$/ /g; s/  product\((.*?), ?(.*?), ?(.*?),/$2|$1|$3|/g; s/^ //g; s/\| +/|/g; s/\|\|/|--empty value--|/g; s/\|bool\|/|Boolean|/g; s/\|uintx\|/|Positive Integer|/g; s/\|intx\|/|Integer|/g; s/\|double\|/|Double|/g; s/\|ccstrlist\|/|String list (comma separated)|/g; s/\|ccstr\|/|String|/g; s/&/&amp;/g; s/</&lt;/g; s/>/&gt;/g; s/(\d+)\*([GMK])/$1$2/g; s/NULL/null/g; s/NOT_LP64\((.*?)\) LP64_ONLY\((.*?)\)/$1 for 32-bits arch, $2 for 64-bits arch/g; s/max_uintx/0xFFFFFFFF for 32-bits arch, 0xFFFFFFFFFFFFFFFF for 64-bits arch/g; s/ScaleForWordSize\((.*?)\)/$1/g; s# /\*ms\*/##g;
    xhtml($_);
    if($n++ == 2) {print "</div>\n<div class=\"row-fluid\">\n"; $n=0;}
}

sub xhtml
{
    $_=$_[0]; s#(.*)\|(.*)\|(.*)\|(.*)#<div class="span4 well"><h3>$1</h3><p><strong>Type : </strong>$2</p><p><strong>Default value : </strong>$3</p><p>$4</p></div>#g; print "$_\n";
}

sub xml
{
    $_=$_[0]; s#(.*)\|(.*)\|(.*)\|(.*)#<jvm:option><jvm:name>$1</jvm:name><jvm:type>$2</jvm:type><jvm:default>$3</jvm:default><jvm:description>$4</jvm:description><jvm:tags><jvm:tag>Unknown</jvm:tag></jvm:tags></jvm:option>#g; print "$_\n";
}

sub html
{
    $_=$_[0]; s#(.*)\|(.*)\|(.*)\|(.*)#<h4>$1</h4><br/>Type : $2<br/>Default value : $3<br/>Description : $4<br/>#g; print "$_\n";
}

sub json
{
    $_=$_[0]; s#(.*)\|(.*)\|(.*)\|(.*)#  { "name": "$1", "type": "$2", "default": "$3", "description": "$4", "tags": [ { "tag": "Unknown" } ] },#g; print "$_\n";
}


